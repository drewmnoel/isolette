isolette[delta: posreal] : THEORY
BEGIN
	importing Time[delta]
	importing Limits_Alarm[delta]

	% Defined Types
	% Monitored Variable Types: The name for the first set corresponds to
	%		the variable name and it's type (ie. temperature)
	TM_TEMP: TYPE = {x: real |  68.0 <= x AND x <= 105.0}
	DL_TEMP: TYPE = {y: nat | 97 <= y AND y <= 99}
	DH_TEMP: TYPE = {y: nat | 98 <= y AND y <= 100}
	AL_TEMP: TYPE = {y: nat | 93 <= y AND y <= 98}
	AH_TEMP: TYPE = {y: nat | 99 <= y AND y <= 103}
	SENSOR: TYPE = {valid, invalid}

	% Controlled Variables Types
	DISP_TEMP: TYPE = {y: nat | y = 0 OR (68 <= y AND y <= 105)}
	MODE: TYPE = {off, init, normal, failed}
	MSG: TYPE = {ok, invalid_sensor, invalid_alarm_high, invalid_alarm_low, alarm_triggered}
	EPS_RANGE: TYPE = subrange(1,1)

	% Monitored Variables
	m_tm: VAR [DTIME->TM_TEMP] %temp monitored
	m_dl: VAR [DTIME->DL_TEMP] %desired low temp
	m_dh: VAR [DTIME->DH_TEMP] %desired high temp
	m_al: VAR [DTIME->AL_TEMP] %desired low alarm temp
	m_ah: VAR [DTIME->AH_TEMP] %desired high alarm temp
	m_st: VAR [DTIME->SENSOR] %status of temp sensor
	m_sw: VAR [DTIME->BOOL] %switch set by operator

	% Controlled Variables:
	c_hc: VAR [DTIME->BOOL] %heat control
	c_td: VAR [DTIME->DISP_TEMP] %displayed isolette temp
	c_al: VAR [DTIME->BOOL] %sound alarm
	c_md: VAR [DTIME->MODE] %mode of isolette
	c_ms: VAR [DTIME->MSG] %message to display

	% Constant Variables:
	eps: VAR [DTIME->EPS_RANGE]

	% Environmental Assumptions

	% Function Tables
	% Funtion table for modes: c_md
	modes_ft(c_md, m_sw, m_st, m_dl, m_tm, m_dh, m_al, m_ah): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_md(i) = off,
	    i > 0 ->
	      COND
	      m_sw(i) = false ->
	        c_md(i) = off,
	      m_sw(i) = true ->
	        COND
	        c_md(i-1) = off ->
	          c_md(i) = init,
	        c_md(i-1) = init ->
	          COND
	            m_st(i) = valid AND m_dl(i) <= m_tm(i) AND m_tm(i) <= m_dh(i) AND m_al(i) < m_dl(i) AND m_dl(i) < m_dh(i) AND m_dh(i) < m_ah(i) ->
	              c_md(i) = normal,
	            NOT (m_st(i) = valid AND m_dl(i) <= m_tm(i) AND m_tm(i) <= m_dh(i) AND m_al(i) < m_dl(i) AND m_dl(i) < m_dh(i) AND m_dh(i) < m_ah(i)) ->
	              c_md(i) = init
	          ENDCOND,
	        c_md(i-1) = normal ->
	          COND
	            m_st(i) = invalid ->
	              c_md(i) = failed,
	            m_st(i) = valid ->
	              c_md(i) = normal
	          ENDCOND,
	        c_md(i-1) = failed ->
	          COND
	            m_st(i) = valid ->
	              c_md(i) = normal,
	            m_st(i) = invalid ->
	              c_md(i) = failed
	          ENDCOND
	        ENDCOND
	      ENDCOND
	  ENDCOND

	% Function table for heat control: c_hc
	heater_ft(c_hc, m_dl, m_dh, m_tm): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_hc(i) = false,
	    i > 0 ->
	      COND
	        m_tm(i) > m_dh(i) ->
	          c_hc(i) = false,
	        m_tm(i) < m_dl(i) ->
	          c_hc(i) = true,
	        m_tm(i) >= m_dl(i) AND m_tm(i) <= m_dh(i) ->
	          c_hc(i) = c_hc(i-1)
	      ENDCOND
	  ENDCOND

	% Function table for alarm: c_al(i)
	alarm_ft(c_al, m_al, eps, m_ah, m_tm): bool =
	  EXISTS(c_al_high:[DTIME->BOOL], c_al_low:[DTIME->BOOL]):
	    limits_alarm_req(m_ah, m_tm, m_al, eps, c_al_high, c_al, c_al_low)

	% Function table for display temperature: c_td
	dispTemp_ft(c_td, m_sw, m_st, m_tm): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_td(i) = 0,
	    i > 0 ->
	      COND
	        m_sw(i) = false ->
	          c_td(i) = 0,
	        m_sw(i) = true ->
	          COND
	            m_st(i) = invalid ->
	              c_td(i) = 0,
	            m_st(i) = valid ->
	              c_td(i) = floor(m_tm(i) + 0.5)
	          ENDCOND
	      ENDCOND
	  ENDCOND


	% Function table for error message: c_ms
	msg_ft(m_tm, m_dl, m_dh, m_al, m_ah, m_st): bool = 
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_ms(i) = ok,
	    i > 0 ->
	      COND
	        m_tm(i) > m_ah(i) ->
	          c_ms(i) = invalid_alarm_high,
	        m_tm(i) < m_al(i) ->
	          c_ms(i) = invalid_alarm_low,
	        m_tm(i) > m_dh(i) OR m_tm(i) < m_dl(i) ->
	          c_ms(i) = alarm_triggered,
	        m_st(i) = true ->
	          c_ms(i) = invalid_sensor,
	        m_al(i) < m_tm(i) AND m_tm(i) < m_ah(i) AND m_al(i) < m_dl(i) AND m_dh(i) < m_ah(i) AND m_dl(i) < m_dh(i) AND m_st(i) = valid ->
	          c_ms(i) = ok
	      ENDCOND
	  ENDCOND

	% Use Cases

END isolette
