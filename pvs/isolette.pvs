isolette: THEORY
BEGIN
	delta: posreal = 1.0
	importing Time[delta]
	importing Limits_Alarm[delta]

	% Defined Types
	% Monitored Variable Types: The name for the first set corresponds to
	%		the variable name and it's type (ie. temperature)
	TM_TEMP: TYPE = {x: real |  68.0 <= x AND x <= 105.0}
	DL_TEMP: TYPE = {y: nat | 97 <= y AND y <= 99}
	DH_TEMP: TYPE = {y: nat | 98 <= y AND y <= 100}
	AL_TEMP: TYPE = {y: nat | 93 <= y AND y <= 98}
	AH_TEMP: TYPE = {y: nat | 99 <= y AND y <= 103}
	SENSOR: TYPE = {valid, invalid}

	% Controlled Variables Types
	DISP_TEMP: TYPE = {y: nat | y = 0 OR (68 <= y AND y <= 105)}
	MODE: TYPE = {off, init, normal, failed}
	MSG: TYPE = {ok, invalid_sensor, invalid_alarm_limits, alarm_triggered}
	EPS_RANGE: TYPE = subrange(1,1)

	% Monitored Variables
	m_tm: VAR [DTIME->TM_TEMP] %temp monitored
	m_dl: VAR [DTIME->DL_TEMP] %desired low temp
	m_dh: VAR [DTIME->DH_TEMP] %desired high temp
	m_al: VAR [DTIME->AL_TEMP] %desired low alarm temp
	m_ah: VAR [DTIME->AH_TEMP] %desired high alarm temp
	m_st: VAR [DTIME->SENSOR] %status of temp sensor
	m_sw: VAR [DTIME->BOOL] %switch set by operator

	% Controlled Variables:
	c_hc: VAR [DTIME->BOOL] %heat control
	c_td: VAR [DTIME->DISP_TEMP] %displayed isolette temp
	c_al: VAR [DTIME->bool] %sound alarm
	c_md: VAR [DTIME->MODE] %mode of isolette
	c_ms: VAR [DTIME->MSG] %message to display

	% Constant Variables:
	eps: VAR [DTIME->EPS_RANGE]

	% Environmental Assumptions

	% Function Tables
	% Helper function table overlap_desired?
	overlap?(low: DL_TEMP, high: DH_TEMP): bool =
	    high <= low

	% Funtion table for modes: c_md
	modes_ft(c_md, m_sw, m_st, m_dl, m_tm, m_dh, m_al, m_ah): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_md(i) = off,
	    i > 0 ->
	      COND
	      m_sw(i) = false ->
	        c_md(i) = off,
	      m_sw(i) = true ->
	        COND
	        c_md(i-1) = off ->
	          c_md(i) = init,
	        c_md(i-1) = init ->
	          COND
	            m_st(i) = valid AND m_dl(i) <= m_tm(i) AND m_tm(i) <= m_dh(i) AND m_al(i) < m_dl(i) AND m_dl(i) < m_dh(i) AND m_dh(i) < m_ah(i) ->
	              c_md(i) = normal,
	            NOT (m_st(i) = valid AND m_dl(i) <= m_tm(i) AND m_tm(i) <= m_dh(i) AND m_al(i) < m_dl(i) AND m_dl(i) < m_dh(i) AND m_dh(i) < m_ah(i)) ->
	              c_md(i) = init
	          ENDCOND,
	        c_md(i-1) = normal ->
	          COND
	            m_st(i) = invalid ->
	              c_md(i) = failed,
	            m_st(i) = valid ->
	              c_md(i) = normal
	          ENDCOND,
	        c_md(i-1) = failed ->
	          COND
	            m_st(i) = valid ->
	              c_md(i) = normal,
	            m_st(i) = invalid ->
	              c_md(i) = failed
	          ENDCOND
	        ENDCOND
	      ENDCOND
	  ENDCOND

	% Function table for heat control: c_hc
	heater_ft(c_hc, m_dl, m_dh, m_tm): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_hc(i) = false,
	    i > 0 ->
	      COND
	        NOT overlap?(m_dl(i), m_dh(i)) -> COND
	          m_tm(i) > m_dh(i) ->
	            c_hc(i) = false,
	          m_tm(i) < m_dl(i) ->
	            c_hc(i) = true,
	          m_tm(i) >= m_dl(i) AND m_tm(i) <= m_dh(i) ->
	            c_hc(i) = c_hc(i-1)
	        ENDCOND,
	        overlap?(m_dl(i), m_dh(i)) -> c_hc(i) = c_hc(i-1)
	      ENDCOND
	  ENDCOND

	% Function table for alarm: c_al(i)
	alarm_ft(c_al, m_al, eps, m_ah, m_tm): bool =
	  EXISTS (should_alarm:[DTIME->BOOL], low_alarm:[DTIME->BOOL], high_alarm:[DTIME->BOOL]):
	  limits_alarm_req(m_ah, m_tm, m_al, eps, high_alarm, should_alarm, low_alarm) AND
	  FORALL (i:DTIME):
	    COND
	      i = 0 ->
	        c_al(i) = 0,
	      i > 0 ->
	          COND
	            should_alarm(i) = true ->
	              c_al(i),
	            should_alarm(i) = false AND held_for(c_al, 5)(i-1) ->
	              NOT c_al(i),
	            should_alarm(i) = false AND NOT held_for(c_al, 5)(i-1) ->
	              c_al(i) = c_al(i-1)
	          ENDCOND
	    ENDCOND


	% Function table for display temperature: c_td
	dispTemp_ft(c_td, m_sw, m_st, m_tm): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_td(i) = 0,
	    i > 0 ->
	      COND
	        m_sw(i) = false ->
	          c_td(i) = 0,
	        m_sw(i) = true ->
	          COND
	            m_st(i) = invalid ->
	              c_td(i) = 0,
	            m_st(i) = valid ->
	              c_td(i) = floor(m_tm(i) + 0.5)
	          ENDCOND
	      ENDCOND
	  ENDCOND


	% Function table for error message: c_ms
	msg_ft(c_ms, c_al, eps, m_tm, m_dl, m_dh, m_al, m_ah, m_st): bool =
	  FORALL (i:DTIME):
	  COND
	    i = 0 ->
	      c_ms(i) = ok,
	    i > 0 ->
	      COND
	        c_al(i) ->
	          c_ms(i) = alarm_triggered,
	        NOT c_al(i) ->
	        COND
	          m_st(i) = invalid ->
                c_ms(i) = invalid_sensor,
	          m_st(i) = valid AND m_al(i) >= m_ah(i) - 2 * eps(i) ->
                c_ms(i) = invalid_alarm_limits,
	          m_st(i) = valid AND m_al(i) < m_ah(i) - 2 * eps(i) ->
                c_ms(i) = ok
	        ENDCOND
	      ENDCOND
	  ENDCOND

	% Master FT
	isolette_ft(m_tm, m_dl, m_dh, m_al, m_ah, m_st, m_sw, eps, c_hc, c_td, c_al, c_md, c_ms): bool =
	  modes_ft(c_md, m_sw, m_st, m_dl, m_tm, m_dh, m_al, m_ah) AND
	  heater_ft(c_hc, m_dl, m_dh, m_tm) AND
	  alarm_ft(c_al, m_al, eps, m_ah, m_tm) AND
	  dispTemp_ft(c_td, m_sw, m_st, m_tm) AND
	  msg_ft(c_ms, c_al, eps, m_tm, m_dl, m_dh, m_al, m_ah, m_st)

	% Use A.2.1 and A.2.2
	usecase_a_2_1: CONJECTURE
	  isolette_ft(m_tm, m_dl, m_dh, m_al, m_ah, m_st, m_sw, eps, c_hc, c_td, c_al, c_md, c_ms) AND
	  m_tm(0) = 68 AND
	  m_sw(1) = true AND   % Nurse turns on the isolette
	  m_dl(1) = 97 AND
	  m_dh(1) = 100 AND
	  m_tm(1) = 68 AND
	  m_st(2) = valid AND
	  m_dl(2) = 97 AND     % Nurse configures the isolette
	  m_al(2) = 96 AND
	  m_dh(2) = 100 AND    % Nurse waits for current temperature to reach range
	  m_ah(2) = 101 AND
	  m_tm(2) = 99 AND
	  m_sw(2) = m_sw(1) AND
	  m_tm(3) = 98 AND
	  m_sw(3) = m_sw(2) AND
	  m_sw(4) = false      % Nurse turns off the isolette
	  IMPLIES
	  c_md(0) = off AND
	  c_hc(0) = false AND
	  c_hc(1) = true AND   % Isolette powers on the heat
	  c_md(1) = init AND   % Isolette awaits configuration
	  c_md(2) = normal AND % Isolette enters normal mode (also fulfills A.2.2)
	  c_md(4) = off

	% Use A.2.3
	usecase_a_2_3: CONJECTURE
	  isolette_ft(m_tm, m_dl, m_dh, m_al, m_ah, m_st, m_sw, eps, c_hc, c_td, c_al, c_md, c_ms) AND
	  c_md(2) = normal AND
	  m_tm(3) > m_dl(3) AND m_tm(3) < m_dh(3) AND
	  m_tm(4) > m_dh(4) + eps(4) AND
	  m_tm(5) < m_dl(5) - eps(5) AND
	  m_dh(2) > m_dl(2) AND
	  m_dh(3) = m_dh(2) = m_dh(4)
	  IMPLIES
	  c_hc(4) = 0 AND c_hc(5) = 1
END isolette
